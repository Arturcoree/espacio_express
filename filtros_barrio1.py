# -*- coding: utf-8 -*-
"""filtros_barrio1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWOLsYzXjnZtwT8HGCCQFyjCxUmzErCm
"""

#Mostrar solo un DataFrame y que trabaje con los filtros de área, precio y barrio según la selección del usuario

import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static

import streamlit as st

import streamlit as st

# Configuramos la página y agregamos un ícono
st.set_page_config(page_title="Espacio Express", page_icon="C:/Users/Jhonny/Documents/Hackathon/logo2.png")

# Agregamos el logo encima del título principal
st.image('C:/Users/Jhonny/Documents/Hackathon/logo2.png', width=100)
st.markdown("<h1 style='text-align: center;'>Espacio Express</h1>", unsafe_allow_html=True)

# Agregamos un lema debajo del título
st.markdown("<p style='text-align: center; font-size: 14px;'>Encuentra tu lugar ideal al mejor precio</p>", unsafe_allow_html=True)

# Agregamos el logo encima del título de la barra lateral
st.sidebar.image('C:/Users/Jhonny/Documents/Hackathon/logo2.png', width=100)
st.sidebar.markdown("<h1 style='text-align: center;'>Espacio Express</h1>", unsafe_allow_html=True)



# Cargamos los datos del archivo CSV en un DataFrame de pandas
data = pd.read_csv('anuncios_con_descripciones17102010.csv')

# Realizamos limpieza y preprocesamiento de los datos
data['Metros cuadrados'] = data['Metros cuadrados'].str.extract('(\d+)').astype(float)
data = data.dropna(subset=['Metros cuadrados'])

bins = [0, 49, 99, 199, float('inf')]
labels = ['Menos de 50 m²', 'Entre 50 y 99 m²', 'Entre 100 y 199 m²', 'Más de 199 m²']
data['Rango'] = pd.cut(data['Metros cuadrados'], bins=bins, labels=labels, right=False)

data['Precio'] = data['Precio'].str.replace('.', '')
data['Precio'] = pd.to_numeric(data['Precio'], errors='coerce')
data = data.dropna(subset=['Precio'])

price_bins = [0, 2000000, 4999999, 9999999, 20000000, 50000000, float('inf')]
price_labels = ['Menos de 2.000.000', 'Entre 2.000.001 y 4.999.999', 'Entre 5.000.000 y 9.999.999', 'Entre 10.000.000 y 20.000.000', 'Entre 20.000.000 y 50.000.000', 'Más de 50.000.000']
data['Rango de precios'] = pd.cut(data['Precio'], bins=price_bins, labels=price_labels)

# Creamos menús desplegables en la barra lateral para seleccionar rango de área y rango de precios
selected_range = st.sidebar.selectbox('Selecciona un rango de área:', ['Todas las áreas'] + labels, key='range_selector')
selected_price_range = st.sidebar.selectbox('Selecciona un rango de precios:', ['Mostrar todos'] + price_labels, key='price_range_selector')

# Creamos un campo de texto en la barra lateral para buscar por barrio o palabra clave
search_term = st.sidebar.text_input('Buscar por barrio o palabra clave:')

# Filtramos el DataFrame según los rangos seleccionados y la entrada del usuario
filtered_data = data.copy()
if selected_range != 'Todas las áreas':
    filtered_data = filtered_data[filtered_data['Rango'] == selected_range]
if selected_price_range != 'Mostrar todos':
    filtered_data = filtered_data[filtered_data['Rango de precios'] == selected_price_range]
if search_term != '':
    filtered_data = filtered_data[filtered_data['Ubicaciones asociadas'].str.contains(search_term, case=False, na=False)]

# Mostramos la cantidad total de datos filtrados
st.write(f"Total de datos filtrados: {len(filtered_data)}")

# Mostramos los locales filtrados en una tabla
filtered_data = filtered_data.reset_index()  # Reseteamos el índice para que sea una columna más
filtered_data = filtered_data.rename(columns={'index': 'ID'})  # Renombramos la columna 'index' a 'ID'
filtered_data['ID'] = filtered_data['ID'] + 1  # Sumamos 1 a los índices para que sean más descriptivos
st.dataframe(filtered_data.set_index('ID'))  # Mostramos la tabla sin la columna del índice original


# Creamos gráficas de barras para mostrar la cantidad de locales por cada rango de área y precios
range_counts = filtered_data['Rango'].value_counts()
st.subheader("Cantidad de locales por área")
st.bar_chart(range_counts)

price_range_counts = filtered_data['Rango de precios'].value_counts()
st.subheader("Cantidad de locales por precio")
st.bar_chart(price_range_counts)